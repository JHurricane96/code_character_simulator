/**
 * @file state.proto
 * Define message format for entire state object
 */

/**
 * Version: Proto3 explicit declaration
 */
syntax = "proto3";

/**
 * Package specifier to prevent name clashes 
 * between protocol message types
 */
package IPC;

/**
 * Message describes the state object
 * Repeated: Map a vector
 * Enum: Composite message type with open enum types
 * Enum defaults to value set with tag 0
 */
message State {

	/**
	 * Message describes base class actor which is used as is
	 * for base, flag, king, scout and swordsman with corresponding 
	 * actor_type set
	 */
	message Actor {
		int64 id = 1;
		int64 attack = 2;
		int64 hp = 3;
		int64 max_hp = 4;
		int64 max_speed = 5;
		int64 total_respawn_time = 6;
		int64 time_to_respawn = 7;
		int64 time_spent_near_base = 8;
		int64 attack_target_id = 9;
		int64 los_radius = 10;
		
		/**
		 * Set type of actor
		 * Default to actor with tag 0
		 */
		enum Actor_type {
			ACTOR = 0;
			ARCHER = 1;
			ARROW = 2;
			BASE = 3;
			FLAG = 4;
			KING = 5;
			SCOUT = 6;
			SWORDSMAN = 7;
			TOWER = 8;
		}
		Actor_type actor_type = 11;
	}

	/**
	 * Expects a vector of actors of the form base, flag, king, scout and swordsman
	 */
	repeated Actor actors = 1;

	/**
	 * Message describes derived class archer
	 * Contains range in addition to actor attributes
	 */
	message Archer {
		Actor derived = 1;
		int64 range = 2;
	}

	/**
	 * Expects a vector of archers
	 */
	repeated Archer archers = 2;

	/**
	 * Message describes derived class arrow
	 * Contains damage and multiplier(2D) in addition to actor attributes
	 */
	message Arrow {
		Actor derived = 1;
		int64 damage = 2;

		/**
	 	 * Expects 64 bit ints
	 	 */
		message Array {
			repeated int64 value = 1;
		}

		/**
	 	 * Expects row of 64 bit ints
	 	 */
		repeated Array multiplier = 3;
	}

	/**
	 * Expects a vector of arrows
	 */
	repeated Arrow arrows = 3;

	/**
	 * Message describes derived class Tower
	 * Contains t_owner of composite type tower_owner in addition to actor attributes
	 */
	message Tower {
		Actor derived = 1;
		enum Tower_owner {
			UNOWNED = 0;
			PLAYER1 = 1;
			PLAYER2 = 2;
		}
		Tower_owner t_owner = 2;
	}

	/**
	 * Expects a vector of towers
	 */
	repeated Tower towers = 4;
	
	/**
	 * Message describes derived class TowerCaptureLogEntry
	 * Contains tower_id, timestamp and player_id
	 */
	message TowerCaptureLogEntry {
	int64 tower_id = 1;
	int64 timestamp = 2;
	int64 player_id = 3;
	}
	repeated TowerCaptureLogEntry tower_capture_log = 5;

	/**
	 * IDs of units held by player 1
	 */
	repeated int64 player_1_unit_ids = 6;
	
	/**
	 * IDs of units held by player 2
	 */
	repeated int64 player_2_unit_ids = 7;
	
	/**
	 * IDs of enemy units seen by player 1
	 */
	repeated int64 player_1_visible_enemy_unit_ids = 8; 
	
	/**
	 * IDs of enemy units seen by player 2
	 */
	repeated int64 player_2_visible_enemy_unit_ids = 9;
	
	/**
	 * IDs of actors of type Tower
	 */
	repeated int64 tower_ids = 10;
	
	/**
	 * IDs of actors of type Flag
	 */
	repeated int64 flag_ids = 11;

	/**
	 * Message describing Vector2D Class
	 */
	message Vector2D {
		double x = 1;
		double y = 2;
	}

	/**
	 * Message describing TerrainElement Class
	 */
	message TerrainElement {
		Vector2D position = 1;
		int64 size = 2;
		enum TERRAIN_TYPE {
			PLAIN = 0;
			FOREST = 1;
			MOUNTAIN = 2;
			UNDEFINED = 3;
		}
		TERRAIN_TYPE terrain_type = 3;
		enum LOS_TYPE {
			UNEXPLORED = 0;
			EXPLORED = 1;
			DIRECT_LOS = 2;
		}
		LOS_TYPE los_type_player_1 = 4;
		LOS_TYPE los_type_player_2 = 5;
		int64 last_seen_player_1 = 6;
		int64 last_seen_player_2 = 7;
	}

	/**
	 * Message describing Terrain Class
	 */
	message Terrain {
		/**
		 * Message containing rows of terrain grid
		 */
		message TerrainRows {
			repeated TerrainElement terrain_element = 1;
		}

		repeated TerrainRows grid = 2;
	}

	Terrain terrain = 12;
}
