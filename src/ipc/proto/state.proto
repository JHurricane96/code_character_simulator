/**
 * @file state.proto
 * Defines message format for entire state object
 */

/**
 * Version: Proto3 explicit declaration
 */
syntax = "proto3";

/**
 * Package specifier to prevent name clashes 
 * between protocol message types
 */
package IPC;

/**
 * Message format describing the state object
 * Repeated: Mapping a vector
 * Enum: Composite message type with open enum types
 * Enum defaults to value set with tag 0
 */
message State {

	/**
	 * Message describing base class actor which is used as is
	 * for base, flag, king, scout and swordsman with corresponding 
	 * actor_type set
	 */
	message Actor{
		int64 id = 1;
		int64 attack = 2;
		int64 hp = 3;
		int64 max_hp = 4;
		int64 max_speed = 5;
		int64 total_respawn_time = 6;
		int64 time_to_respawn = 7;
		int64 time_spent_near_base = 8;
		int64 attack_target_id = 9;
		int64 los_radius = 10;
		/**
		 * Set type of actor
		 * Defaults to actor with tag 0
		 */
		enum actor_type{
			actor = 0;
			archer = 1;
			arrow = 2;
			base = 3;
			flag = 4;
			king = 5;
			scout = 6;
			swordsman = 7;
			tower = 8;
		}
		actor_type = 11;
	}
	/**
	 * Expecting an vector of actors of the form base, flag, king, scout and swordsman
	 */
	repeated Actor actors = 1;

	/**
	 * Message describing derived class archer
	 * Contains range in addition to actor attributes
	 */
	message Archer{
		int64 id = 1;
		int64 attack = 2;
		int64 hp = 3;
		int64 max_hp = 4;
		int64 max_speed = 5;
		int64 total_respawn_time = 6;
		int64 time_to_respawn = 7;
		int64 time_spent_near_base = 8;
		int64 attack_target_id = 9;
		int64 los_radius = 10;
		int64 range = 11;
		enum actor_type{
			actor = 0;
			archer = 1;
			arrow = 2;
			base = 3;
			flag = 4;
			king = 5;
			scout = 6;
			swordsman = 7;
			tower = 8;
		}
		actor_type = 12;
	}
	/**
	 * Expecting an vector of archers
	 */
	repeated Archer archers = 2;

	/**
	 * Message describing derived class arrow
	 * Contains damage and multiplier(2D) in addition to actor attributes
	 */
	message Arrow{
		int64 id = 1;
		int64 attack = 2;
		int64 hp = 3;
		int64 max_hp = 4;
		int64 max_speed = 5;
		int64 total_respawn_time = 6;
		int64 time_to_respawn = 7;
		int64 time_spent_near_base = 8;
		int64 attack_target_id = 9;
		int64 los_radius = 10;
		int64 damage = 11;
		/**
	 	 * Expecting 64 bit ints
	 	 */
		message array{
			repeated int64;
		}
		/**
	 	 * Expecting row of 64 bit ints
	 	 */
		repeated array multiplier = 12;
		enum actor_type{
			actor = 0;
			archer = 1;
			arrow = 2;
			base = 3;
			flag = 4;
			king = 5;
			scout = 6;
			swordsman = 7;
			tower = 8;
		}
		actor_type = 13;
	}
	/**
	 * Expecting an vector of arrows
	 */
	repeated Arrow arrows = 3;

	/**
	 * Message describing derived class Tower
	 * Contains t_owner of composite type tower_owner in addition to actor attributes
	 */
	message Tower{
		int64 id = 1;
		int64 attack = 2;
		int64 hp = 3;
		int64 max_hp = 4;
		int64 max_speed = 5;
		int64 total_respawn_time = 6;
		int64 time_to_respawn = 7;
		int64 time_spent_near_base = 8;
		int64 attack_target_id = 9;
		int64 los_radius = 10;
		enum tower_owner{
			unowned = 0;
			player1 = 1;
			player2 = 2;
		}
		tower_owner t_owner = 11;

		enum actor_type{
			actor = 0;
			archer = 1;
			arrow = 2;
			base = 3;
			flag = 4;
			king = 5;
			scout = 6;
			swordsman = 7;
			tower = 8;
		}
		actor_type = 12;
	}
	/**
	 * Expecting an vector of towers
	 */
	repeated Tower towers = 4;
	
	/**
	 * Message describing derived class TowerCaptureLogEntry
	 * Contains tower_id, timestamp and player_id
	 */
	message TowerCaptureLogEntry {
	int64 tower_id = 1;
	int64 timestamp = 2;
	int64 player_id = 3;
	}
	repeated TowerCaptureLogEntry tower_capture_log = 5;
	/**
	 * IDs of units held by player 1
	 */
	repeated int64 player_1_unit_ids = 6;
	/**
	 * IDs of units held by player 2
	 */
	repeated int64 player_2_unit_ids = 7;
	/**
	 * IDs of enemy units seen by player 1
	 */
	repeated int64 player_1_visible_enemy_unit_ids = 8; 
	/**
	 * IDs of enemy units seen by player 2
	 */
	repeated int64 player_2_visible_enemy_unit_ids = 9;
	/**
	 * IDs of actors of type Tower
	 */
	repeated int64 tower_ids = 10;
	/**
	 * IDs of actors of type Flag
	 */
	repeated int64 flag_ids = 11;
}

/**
 * TO-DO
 * Add formations and terrain support
 */